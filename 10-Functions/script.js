'use strict';


//------------- 129. Default Parameters -------------
//valor padrÃ£o

/*
const bookings = [];

const createBooking = function (
    flightNum,
    numPassengers = 1,
    price = 150 * numPassengers // sÃ³ funciona para parametros definidos antes desse (price)
) {
    // ES5
    // numPassengers = numPassengers || 1;
    // price = price || 150;

    const booking = {
        flightNum,
        numPassengers,
        price
    }
    console.log(booking);
    bookings.push(booking);
}

createBooking('ABX425')

createBooking('ABX425', 4, 10)

createBooking('ABX425', 4) // o segundo ARGUMENTO sempre Ã© mapeado para o segundo PARÃ‚METRO
//ou seja, nÃ£o Ã© possÃ­vel pular PARÃ‚METRO

createBooking('ABX425', undefined, 4)//Uma maneira para resolver isso Ã© adicionando o ARGUMENTO como UNDEFINED
//funciona pois, fazendo isso Ã© a mesma coisa que nem configura-lo, jÃ¡ que quando nÃ£o passamos o argumento ele fica como UNDEFINED

console.log(bookings)
*/




//------------- 130. How Passing Arguments Works: Value vs. Reference -------------
//Como funciona a passagem de argumentos: valor versus referÃªncia

// const flight = 'LH234'; // PRIMITIVO
// const denis = {
//     name: 'Denis Capelete',
//     passport: 45685265423
// }

// const checkIn = function (flightNum, passenger) { // 
//     flightNum = 'LH999'; //o PARAMETRO flightNum funciona basicamente como uma cÃ³pia do valor original, portanto essa mudanÃ§a nÃ£o altera de fato o "flight"
//     passenger.name = 'Mr. ' + passenger.name // Quando passamos um tipo de referÃªncia para uma funÃ§Ã£o, Ã© copiado a referÃªncia ao objeto no heap de memÃ³ria

//     // Ã© apenas um exemplo, nÃ£o devemos alterar o valor de um PARÃ‚METRO


//     if (passenger.passport === 45685265423) {
//         alert('Checked in');
//     } else {
//         alert('Wrong passport!');
//     }

// }
// //passar valor PRIMITIVO para uma funÃ§Ã£o Ã© p mesmo que criar uma cÃ³pia

// //passar OBJETO cria uma copia simples utilizando o mesmo espaÃ§o no HEAP

// checkIn(flight, denis)
// console.log(flight);
// console.log(denis)

// //Ã© o mesmo que fazer...
// const flightNum = flight
// // faz uma copia, se o flightNum for alterado o fligth nÃ£o sofre alteraÃ§Ã£o.
// const passenger = denis  // passenger e denis apontam para o mesmo objeto na memÃ³ria.
// // copia a mesma referÃªncia no HEAP, entÃ£o se alterar o 'passenger' o 'denis' tambÃ©m sofre alteraÃ§Ã£o por usarem o mesmo espaÃ§o no HEAP de memÃ³ria.

// // Exemplo de problema
// const newPassport = function (person) {
//     person.passport = Math.trunc(Math.random() * 100000001);
// };

// newPassport(denis);// aqui Ã© feita a alteraÃ§Ã£o do nÃºmero do passaporte no OBJETO
// checkIn(flight, denis); // aqui o objeto foi alterado pela funÃ§Ã£o "newPassport" entÃ£o o nÃºmero do passaporte nÃ£o Ã© mais o mesmo e da falso nossa condiÃ§Ã£o




// //------------- 132. Functions Accepting Callback Functions -------------

// //FunÃ§Ã£o de ordem superior (Higher-order function)

// const oneWord = function (str) {
//     return str.replace(/ /g, '').toLowerCase();
// }

// const upperFirstWord = function (str) {
//     const [first, ...others] = str.split(' ');
//     return [first.toUpperCase(), ...others].join(' ');
// }
// const transformer = function (str, fn) {
//     console.log(`Original string: ${str}`);

//     console.log(`Transformed string: ${fn(str)}`);

//     console.log(`Transformed by: ${fn.name}`)

// }

// transformer('JavaScript is the best!', upperFirstWord);
// transformer('JavaScript is the best!', oneWord);


// // JavaScript usa chamada de retorno o tempo todo (JS uses callbacks all the time)
// const high5 = function () {
//     console.log('ðŸ‘‹');
// };
// document.body.addEventListener('click', high5);
// ['denis', 'jonas', 'teste'].forEach(high5);


// const nome = function (str) {
//     return str[0].toUpperCase() + str.slice(1);
// }

// const message = function (nome, func) {
//     console.log(`OlÃ¡ ${func(nome)}`)
// }

// message('denis', nome)


// // //------------- 133. Functions Returning Functions (FunÃ§Ãµes Retornando FunÃ§Ãµes)  -------------

// const greet = function (greeting) {
//     return function (name) {
//         console.log(`${greeting} ${name}`);
//     };
// };


// const greeterHey = greet('Hey');

// greeterHey('Denis');
// greeterHey('Jonas');

// greet('OlÃ¡')('Denis')


// // Challenge
// const saudar = saudacao => nome => console.log(`${saudacao} ${nome}`)

// saudar('Bom dia')('Denis');

// const saudarOla = saudar('OlÃ¡');
// saudarOla('Denis');



// // //------------- 134. The call and apply Methods  -------------

// const lufthansa = {
//     airline: 'Lufthansa',
//     iataCode: 'LH',
//     bookings: [],
//     book(flightNum, name) {
//         console.log(`${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`);
//         this.bookings.push({ flight: `${this.iataCode}${flightNum}`, name })
//     },
// }

// lufthansa.book(210, 'Denis Teste');
// lufthansa.book(542, 'Jonas Testando');
// console.log(lufthansa)

// const eurowings = {
//     airline: 'Eurowings',
//     iataCode: 'EW',
//     bookings: [],
// };
// // Precisamos usar exatamente os mesmos nome das 'PROPRIEDADE' do objeto original, pois O 'MÃ‰TODO BOOK' estÃ¡ tentando ler apenas essas propriedades

// const book = lufthansa.book;

// // NÃ£o funciona (Does NOT work)
// // book(23, 'Joao Pedro'); 
// // a palavra-chave 'THIS' a qual 'BOOK' se refere nesse caso estÃ¡ apontando para 'UNDEFINED'



// // ------- MÃ©todo de chamada - (Call method) -------
// // Definindo manual e explicitamente a palavra-chave(this)
// book.call(eurowings, 23, 'Joao Pedro');
// // o mÃ©todo 'CALL', chama a funÃ§Ã£o book com a palavra-chave(this) definida como eurowings
// console.log(eurowings);

// book.call(lufthansa, 202, 'Marina Silva');
// console.log(lufthansa);

// const swiss = {
//     airline: 'Swiss Air Lines',
//     iataCode: 'LX',
//     bookings: []
// }

// book.call(swiss, 282, 'Kaka');
// console.log(swiss);



// // ------- MÃ©todo de aplicaÃ§Ã£o - (Apply method)  -------
// //NÃ£o recebe uma lista de argumentos apos Ã¡ palavra-chave(this), na verdade ele receberÃ¡ um 'ARRAY' de argumentos.
// const flightData = [320, 'George Lincoln'];
// book.apply(swiss, flightData);
// //NÃƒO Ã‰ MAIS UTILIZADO
// console.log(swiss);

// book.call(swiss, ...flightData)
// //MANEIRA INDICADA



// // //------------- 135. The bind Method  -------------

// // ------- MÃ©todo de bind - (Bind method)  -------
// // Assim como 'CALL' permite definir manualmente as palavras-chave(this)
// // O 'BIND' nÃ£o chama a funÃ§Ã£o imediatamente, ele retorna uma nova funÃ§Ã£o onde a palavra-chave(this) estÃ¡ associada.
// // Ã‰ necessario chamar a funÃ§Ã£o posteriormente quando for usar

// const bookLH = book.bind(lufthansa);
// const bookEW = book.bind(eurowings);
// const bookLX = book.bind(swiss);

// bookEW(425, 'Jorginho');
// console.log(eurowings);

// const bookEW23 = book.bind(eurowings, 23);
// //Neste caso deixamos predefinido o primeiro parÃ¢metro (padrÃ£o chamado de aplicaÃ§Ã£o parcial)
// bookEW23('Denis teste'); // retorna -  Denis teste booked a seat on Eurowings flight EW23
// bookEW23('Marta testando') // retorna - Marta testando booked a seat on Eurowings flight EW23

// // With Event Listeners
// lufthansa.planes = 300;
// lufthansa.buyPlane = function () {
//     console.log(this);

//     this.planes++
//     console.log(this.planes);
// };
// // lufthansa.buyPlane()


// document.querySelector('.buy')
//     .addEventListener('click', lufthansa.buyPlane.bind(lufthansa));


// // Partial application

// const addTax = (rate, value) => value + value * rate;

// console.log(addTax(0.1, 200));


// const addVAT = addTax.bind(null, 0.23); // neste caso nÃ£o importa a palavra-chave(this) entÃ£o adicionamos null.

// console.log(addVAT(100));
// console.log(addVAT(200));


// // // const addNewTax = rate => value =>  value + value * rate; (com arrow function)


// const addNewTax = function (rate) {
//     return function (value) {
//         return value + value * rate;;
//     }
// }

// const newTax = addNewTax(0.23);

// console.log(newTax(200));
// console.log(newTax(100));


// // //------------- 136. Coding Challenge #1  -------------
// Coding Challenge #1

/* 
Let's build a simple poll app!

A poll has a question, an array of options from which people can choose, and an array with the number of replies for each option. This data is stored in the starter object below.

Here are your tasks:

1. Create a method called 'registerNewAnswer' on the 'poll' object. The method does 2 things:
  1.1. Display a prompt window for the user to input the number of the selected option. The prompt should look like this:
        What is your favourite programming language?
        0: JavaScript
        1: Python
        2: Rust
        3: C++
        (Write option number)
  
  1.2. Based on the input number, update the answers array. For example, if the option is 3, increase the value AT POSITION 3 of the array by 1. Make sure to check if the input is a number and if the number makes sense (e.g answer 52 wouldn't make sense, right?)
2. Call this method whenever the user clicks the "Answer poll" button.
3. Create a method 'displayResults' which displays the poll results. The method takes a string as an input (called 'type'), which can be either 'string' or 'array'. If type is 'array', simply display the results array as it is, using console.log(). This should be the default option. If type is 'string', display a string like "Poll results are 13, 2, 4, 1". 
4. Run the 'displayResults' method at the end of each 'registerNewAnswer' method call.

HINT: Use many of the tools you learned about in this and the last section ðŸ˜‰

BONUS: Use the 'displayResults' method to display the 2 arrays in the test data. Use both the 'array' and the 'string' option. Do NOT put the arrays in the poll object! So what shoud the this keyword look like in this situation?

BONUS TEST DATA 1: [5, 2, 3]
BONUS TEST DATA 2: [1, 5, 3, 9, 6, 1]

GOOD LUCK ðŸ˜€
*/


/////////////////////////////////////// // Desafio de CodificaÃ§Ã£o #1

/* Vamos construir um simples aplicativo de enquete!

Uma enquete tem uma pergunta, um array de opÃ§Ãµes para as quais as pessoas podem escolher e um array com o nÃºmero de respostas para cada opÃ§Ã£o.
Esses dados estÃ£o armazenados no objeto inicial abaixo.

Aqui estÃ£o suas tarefas:

Crie um mÃ©todo chamado 'registerNewAnswer' no objeto 'poll'. O mÃ©todo faz 2 coisas:

1.1. Exibe uma janela de prompt para o usuÃ¡rio inserir o nÃºmero da opÃ§Ã£o selecionada. 
    O prompt deve ser assim: Qual Ã© a sua linguagem de programaÃ§Ã£o favorita? 0: JavaScript 1: Python 2: Rust 3: C++ C

1.2.  
    1.2.1. Com base no nÃºmero de entrada, atualize o array de respostas. Por exemplo, se a opÃ§Ã£o for 3, aumente o valor NA POSIÃ‡ÃƒO 3 do array em 1.
    1.2.2. Certifique-se de verificar se a entrada Ã© um nÃºmero e se o nÃºmero faz sentido (por exemplo, a resposta 52 nÃ£o faria sentido, certo?) 2.    
    1.2.3. Chame este mÃ©todo sempre que o usuÃ¡rio clicar no botÃ£o "Responder enquete". 3. 
    Crie um mÃ©todo 'displayResults' que exiba os resultados da enquete.
    O mÃ©todo recebe uma string como entrada (chamada 'type'), que pode ser 'string' ou 'array'.
    Se o tipo for 'array', simplesmente exiba o array de resultados como estÃ¡, usando console.log(). Esta deve ser a opÃ§Ã£o padrÃ£o.
    Se o tipo for 'string', exiba uma string como "Os resultados da enquete sÃ£o 13, 2, 4, 1". 4.
    Execute o mÃ©todo 'displayResults' no final de cada chamada do mÃ©todo 'registerNewAnswer'.

DICA: Use muitas das ferramentas que vocÃª aprendeu nesta e na Ãºltima seÃ§Ã£o ðŸ˜‰

BÃ”NUS: Use o mÃ©todo 'displayResults' para exibir os 2 arrays nos dados de teste. Use tanto a opÃ§Ã£o 'array' quanto 'string'. NÃƒO coloque os arrays no objeto da enquete! EntÃ£o, como deve ser a palavra-chave this nesse caso?

DADOS DE TESTE BÃ”NUS 1: [5, 2, 3] DADOS DE TESTE BÃ”NUS 2: [1, 5, 3, 9, 6, 1]

BOA SORTE ðŸ˜€ */

// ----------------------- ResoluÃ§Ã£o do Professor (inÃ­cio) -----------------------

const poll = {
    question: 'What is your favourite programming language?',
    options: [
        '0: JavaScript',
        '1: Python',
        '2: Rust',
        '3: C++'
    ],
    // This generates [0, 0, 0, 0]. More in the next section ðŸ˜ƒ
    answers: new Array(4).fill(0),

    registerNewAnswer() {
        // Get answer
        const answer = Number(
            prompt(
                `${this.question}\n${this.options.join('\n')}\n(Write option number)`
            )
        );
        console.log(answer);

        // Register answer
        typeof answer === 'number' && answer < this.options.length && answer >= 0 &&
            this.answers[answer]++;

        this.displayResults();
        this.displayResults('string');
    },

    displayResults(type = 'array') {
        if (type === 'array') {
            console.log(this.answers);
        } else if (type === 'string') {
            console.log(`Poll results are ${this.answers.join(', ')}.`)
        }
    },

};

document.querySelector('.poll').addEventListener('click', poll.registerNewAnswer.bind(poll));
//em uma funÃ§Ã£o de manipulador de eventos igual a essa a palavra this aponta para ela, para solucionar adicionamos o .bind('nome de onde queremos a palavra chave')

// poll.registerNewAnswer();

// ----------------------- ResoluÃ§Ã£o do Professor (Fim) -----------------------



// ----------------------- Minha resoluÃ§Ã£o (inÃ­cio) -----------------------
// const poll = {
//     question: 'What is your favourite programming language?',
//     options: [
//         '0: JavaScript',
//         '1: Python',
//         '2: Rust',
//         '3: C++'
//     ],
//     // This generates [0, 0, 0, 0]. More in the next section ðŸ˜ƒ
//     answers: new Array(4).fill(0),
//     registerNewAnswer(type = 'array') {
//         document.querySelector('.poll').addEventListener('click', function () {

//             const answer = Number(prompt(poll.question + poll.options + '(Escreva o nÃºmero da opÃ§Ã£o)'))

//             if ((typeof answer) == 'number' && answer >= 0 && answer < 4) {
//                 poll.answers[answer] = poll.answers[answer] + 1;
//                 poll.displayResults(type);
//             } else {
//                 alert(`Por favor, tente novamente '${answer}' nÃ£o corresponde a nenhuma das opÃ§Ãµes`)
//             }

//         });
//     },

//     displayResults(type) {
//         if (type == 'array') {
//             console.log(poll.answers)
//         } else if (type == 'string') {

//             console.log(`Os resultados da enquete sÃ£o ${[...poll.answers]}.`);
//         }

//     },
// };

// const registerNewAnswer = poll.registerNewAnswer('string');

// const teste = poll.registerNewAnswer();

// ----------------------- Minha resoluÃ§Ã£o (Fim) -----------------------



